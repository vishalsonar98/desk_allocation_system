package com.example.UserService.ServiceImpl;

import java.util.List;
import java.util.stream.Collectors;

import com.example.UserService.Entity.Role;
import com.example.UserService.Entity.User;
import com.example.UserService.Exception.DeskAlreadyTakenException;
import com.example.UserService.Exception.ResourceNotFoundException;
import com.example.UserService.Payload.UserDto;
import com.example.UserService.Repository.RoleRepository;
import com.example.UserService.Repository.UserRepository;
import com.example.UserService.Service.UserService;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;


@Service
public class UserServiceImpl  implements UserService{


	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private RoleRepository roleRepository;
	
	
	
	@Override
	public UserDto createUser(UserDto userDto) {
		
		User user=this.modelMapper.map(userDto, User.class);
		
		Role role = roleRepository.findById(userDto.getRoleId()).get();
		user.setRole(role);
		
		User addUser=this.userRepository.save(user);
		
		return this.modelMapper.map(addUser, UserDto.class);
	}

	@Override
	public UserDto updateUser(UserDto userDto, Long userId) {
		

		User user =this.userRepository.findById(userId)
				.orElseThrow(()-> new ResourceNotFoundException("User", "User Id", userId));
		user.setUsername(userDto.getUsername());
		user.setEmail(userDto.getEmail());
		user.setPassword(userDto.getPassword());
		User updatedUser=this.userRepository.save(user);
		return this.modelMapper.map(updatedUser, UserDto.class);
	}

	@Override
	public UserDto getUserById(Long userId) {
		
		User user=this.userRepository.findById(userId)
				.orElseThrow(()-> new ResourceNotFoundException("User", "User Id", userId));
		
		return this.modelMapper.map(user, UserDto.class);
	}

	@Override
	public List<UserDto> getAllUsers() {
		
		
		List<User> users=this.userRepository.findAll();
		List<UserDto> userDtos= users.stream().map((user)->this.modelMapper.map(user, UserDto.class)).collect(Collectors.toList());
		return userDtos;
	}

	@Override
	public void deleteUser(Long userId) {
		
		User user=this.userRepository.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User", "User Id", userId));
		this.userRepository.delete(user);
		
	}

	@Override
	public Optional<UserDto> allocateDeskToUser(long userid, long deskid) throws DeskAlreadyTakenException {
		User extraUser = userRepository.findUserByDeskId(deskid);
		if (!ObjectUtils.isEmpty(extraUser)) {
//			throw new DeskAlreadyTakenException("Desk already taken by another user...");
			return 
		}
		User existingUser = this.userRepository.findById(userid).get();
		existingUser.setDeskId(deskid);
		User user = this.userRepository.save(existingUser);
		Optional<UserDto> userResult = this.modelMapper.map(user,UserDto.class)
		return ;
	}

}
