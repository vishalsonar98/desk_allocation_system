package com.example.UserService.Controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import com.example.UserService.Exception.DeskAlreadyTakenException;
import com.example.UserService.Payload.UserDto;
import com.example.UserService.Service.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/users")
public class UserController {
	
	
	@Autowired
	private UserService userService;
	
	
	
	
		// POST - create user
		@PostMapping("/")
		public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserDto userDto) {
			UserDto createduser = this.userService.createUser(userDto);
			return new ResponseEntity<>(createduser, HttpStatus.CREATED);
		}
		
		//GET - get all users
		@GetMapping("/")
		public ResponseEntity<List<UserDto>> getAllUser(){
					
			List<UserDto> userDtos = this.userService.getAllUsers();
			return ResponseEntity.ok(userDtos);
					
		}
		
		// PUT - update user
		@PutMapping("/{userId}")
		public ResponseEntity<UserDto> updateUser(@Valid @RequestBody UserDto userDto, @PathVariable Long userId) {
			UserDto updatedUser = this.userService.updateUser(userDto, userId);
			return ResponseEntity.ok(updatedUser);
		}
		
		
		//GET - get one User
		@GetMapping("/{userId}")
		public ResponseEntity<UserDto> getUser(@PathVariable Long userId){
			
			UserDto userDto = this.userService.getUserById(userId);
			return ResponseEntity.ok(userDto);
					
		}
		
		@PutMapping("/{userid}/{deskid}")
		public Optional<UserDto> allocateDeskToUser(@PathVariable("userid") long userid,@PathVariable("deskid") long deskid) 
		{
			Optional<UserDto> user = this.userService.allocateDeskToUser(userid, deskid);
			return user;
		}
		

}
